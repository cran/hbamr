// Generated by rstantools.  Do not edit by hand.

/*
    hbamr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hbamr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hbamr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_HBAM_MULTI_NF_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'HBAM_MULTI_NF', line 27, column 2 to column 22)",
                                                      " (in 'HBAM_MULTI_NF', line 28, column 2 to column 21)",
                                                      " (in 'HBAM_MULTI_NF', line 29, column 2 to column 22)",
                                                      " (in 'HBAM_MULTI_NF', line 30, column 2 to column 26)",
                                                      " (in 'HBAM_MULTI_NF', line 31, column 2 to column 26)",
                                                      " (in 'HBAM_MULTI_NF', line 32, column 2 to column 25)",
                                                      " (in 'HBAM_MULTI_NF', line 33, column 2 to column 30)",
                                                      " (in 'HBAM_MULTI_NF', line 34, column 2 to column 40)",
                                                      " (in 'HBAM_MULTI_NF', line 35, column 2 to column 33)",
                                                      " (in 'HBAM_MULTI_NF', line 36, column 2 to column 22)",
                                                      " (in 'HBAM_MULTI_NF', line 37, column 2 to column 27)",
                                                      " (in 'HBAM_MULTI_NF', line 38, column 2 to column 17)",
                                                      " (in 'HBAM_MULTI_NF', line 41, column 2 to column 18)",
                                                      " (in 'HBAM_MULTI_NF', line 42, column 2 to column 17)",
                                                      " (in 'HBAM_MULTI_NF', line 43, column 2 to column 22)",
                                                      " (in 'HBAM_MULTI_NF', line 44, column 2 to column 24)",
                                                      " (in 'HBAM_MULTI_NF', line 45, column 2 to column 95)",
                                                      " (in 'HBAM_MULTI_NF', line 46, column 2 to column 92)",
                                                      " (in 'HBAM_MULTI_NF', line 47, column 2 to column 38)",
                                                      " (in 'HBAM_MULTI_NF', line 48, column 2 to column 20)",
                                                      " (in 'HBAM_MULTI_NF', line 49, column 2 to column 25)",
                                                      " (in 'HBAM_MULTI_NF', line 50, column 2 to column 25)",
                                                      " (in 'HBAM_MULTI_NF', line 52, column 4 to column 60)",
                                                      " (in 'HBAM_MULTI_NF', line 53, column 4 to column 61)",
                                                      " (in 'HBAM_MULTI_NF', line 51, column 17 to line 54, column 3)",
                                                      " (in 'HBAM_MULTI_NF', line 51, column 2 to line 54, column 3)",
                                                      " (in 'HBAM_MULTI_NF', line 56, column 4 to line 57, column 37)",
                                                      " (in 'HBAM_MULTI_NF', line 55, column 21 to line 58, column 3)",
                                                      " (in 'HBAM_MULTI_NF', line 55, column 2 to line 58, column 3)",
                                                      " (in 'HBAM_MULTI_NF', line 79, column 2 to column 37)",
                                                      " (in 'HBAM_MULTI_NF', line 80, column 2 to column 88)",
                                                      " (in 'HBAM_MULTI_NF', line 61, column 2 to column 27)",
                                                      " (in 'HBAM_MULTI_NF', line 62, column 2 to column 26)",
                                                      " (in 'HBAM_MULTI_NF', line 63, column 2 to column 27)",
                                                      " (in 'HBAM_MULTI_NF', line 64, column 2 to column 49)",
                                                      " (in 'HBAM_MULTI_NF', line 65, column 2 to column 26)",
                                                      " (in 'HBAM_MULTI_NF', line 66, column 2 to column 28)",
                                                      " (in 'HBAM_MULTI_NF', line 67, column 2 to column 46)",
                                                      " (in 'HBAM_MULTI_NF', line 68, column 2 to column 45)",
                                                      " (in 'HBAM_MULTI_NF', line 69, column 2 to column 45)",
                                                      " (in 'HBAM_MULTI_NF', line 70, column 2 to column 22)",
                                                      " (in 'HBAM_MULTI_NF', line 71, column 2 to column 33)",
                                                      " (in 'HBAM_MULTI_NF', line 72, column 2 to column 36)",
                                                      " (in 'HBAM_MULTI_NF', line 76, column 4 to column 42)",
                                                      " (in 'HBAM_MULTI_NF', line 74, column 4 to column 27)",
                                                      " (in 'HBAM_MULTI_NF', line 73, column 2 to line 76, column 42)",
                                                      " (in 'HBAM_MULTI_NF', line 2, column 2 to column 19)",
                                                      " (in 'HBAM_MULTI_NF', line 3, column 2 to column 19)",
                                                      " (in 'HBAM_MULTI_NF', line 4, column 2 to column 19)",
                                                      " (in 'HBAM_MULTI_NF', line 5, column 2 to column 23)",
                                                      " (in 'HBAM_MULTI_NF', line 6, column 8 to column 13)",
                                                      " (in 'HBAM_MULTI_NF', line 6, column 2 to column 33)",
                                                      " (in 'HBAM_MULTI_NF', line 7, column 8 to column 13)",
                                                      " (in 'HBAM_MULTI_NF', line 7, column 2 to column 33)",
                                                      " (in 'HBAM_MULTI_NF', line 8, column 8 to column 9)",
                                                      " (in 'HBAM_MULTI_NF', line 8, column 2 to column 29)",
                                                      " (in 'HBAM_MULTI_NF', line 9, column 2 to column 19)",
                                                      " (in 'HBAM_MULTI_NF', line 10, column 2 to column 30)",
                                                      " (in 'HBAM_MULTI_NF', line 11, column 2 to column 30)",
                                                      " (in 'HBAM_MULTI_NF', line 12, column 32 to column 37)",
                                                      " (in 'HBAM_MULTI_NF', line 12, column 2 to column 41)",
                                                      " (in 'HBAM_MULTI_NF', line 13, column 32 to column 33)",
                                                      " (in 'HBAM_MULTI_NF', line 13, column 2 to column 37)",
                                                      " (in 'HBAM_MULTI_NF', line 14, column 2 to column 31)",
                                                      " (in 'HBAM_MULTI_NF', line 15, column 31 to column 36)",
                                                      " (in 'HBAM_MULTI_NF', line 15, column 2 to column 46)",
                                                      " (in 'HBAM_MULTI_NF', line 16, column 2 to column 33)",
                                                      " (in 'HBAM_MULTI_NF', line 17, column 2 to column 32)",
                                                      " (in 'HBAM_MULTI_NF', line 20, column 2 to column 63)",
                                                      " (in 'HBAM_MULTI_NF', line 21, column 2 to column 55)",
                                                      " (in 'HBAM_MULTI_NF', line 22, column 31 to column 36)",
                                                      " (in 'HBAM_MULTI_NF', line 22, column 2 to column 64)",
                                                      " (in 'HBAM_MULTI_NF', line 23, column 2 to column 35)",
                                                      " (in 'HBAM_MULTI_NF', line 24, column 2 to column 90)",
                                                      " (in 'HBAM_MULTI_NF', line 27, column 9 to column 10)",
                                                      " (in 'HBAM_MULTI_NF', line 28, column 9 to column 10)",
                                                      " (in 'HBAM_MULTI_NF', line 30, column 8 to column 9)",
                                                      " (in 'HBAM_MULTI_NF', line 31, column 10 to column 11)",
                                                      " (in 'HBAM_MULTI_NF', line 32, column 10 to column 11)",
                                                      " (in 'HBAM_MULTI_NF', line 37, column 20 to column 21)",
                                                      " (in 'HBAM_MULTI_NF', line 38, column 10 to column 11)",
                                                      " (in 'HBAM_MULTI_NF', line 41, column 9 to column 10)",
                                                      " (in 'HBAM_MULTI_NF', line 42, column 9 to column 10)",
                                                      " (in 'HBAM_MULTI_NF', line 43, column 8 to column 9)",
                                                      " (in 'HBAM_MULTI_NF', line 44, column 9 to column 14)",
                                                      " (in 'HBAM_MULTI_NF', line 45, column 9 to column 10)",
                                                      " (in 'HBAM_MULTI_NF', line 46, column 9 to column 10)",
                                                      " (in 'HBAM_MULTI_NF', line 80, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_HBAM_MULTI_NF final : public model_base_crtp<model_HBAM_MULTI_NF> {
private:
  int N;
  int J;
  int G;
  int N_obs;
  std::vector<int> ii;
  std::vector<int> jj;
  std::vector<int> gg;
  int B;
  int L;
  int R;
  Eigen::Matrix<double, -1, 1> Y;
  Eigen::Matrix<double, -1, 1> V;
  int CV;
  Eigen::Matrix<double, -1, 1> holdout;
  double sigma_mu_alpha;
  double sigma_mu_beta;
  double sigma_alpha_prior_rate;
  double tau_prior_rate;
  Eigen::Matrix<double, -1, 1> not_holdout;
  double mean_mu_simplexes;
  double sd_mu_simplexes;
 
public:
  ~model_HBAM_MULTI_NF() { }
  
  inline std::string model_name() const final { return "model_HBAM_MULTI_NF"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_HBAM_MULTI_NF(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_HBAM_MULTI_NF_namespace::model_HBAM_MULTI_NF";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 47;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 47;
      current_statement__ = 47;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 48;
      context__.validate_dims("data initialization","J","int",
          context__.to_vec());
      J = std::numeric_limits<int>::min();
      
      current_statement__ = 48;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 48;
      current_statement__ = 48;
      check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 49;
      context__.validate_dims("data initialization","G","int",
          context__.to_vec());
      G = std::numeric_limits<int>::min();
      
      current_statement__ = 49;
      G = context__.vals_i("G")[(1 - 1)];
      current_statement__ = 49;
      current_statement__ = 49;
      check_greater_or_equal(function__, "G", G, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization","N_obs","int",
          context__.to_vec());
      N_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 50;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "N_obs", N_obs, 1);
      current_statement__ = 51;
      validate_non_negative_index("ii", "N_obs", N_obs);
      current_statement__ = 52;
      context__.validate_dims("data initialization","ii","int",
          context__.to_vec(N_obs));
      ii = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 52;
      assign(ii, nil_index_list(), context__.vals_i("ii"),
        "assigning variable ii");
      current_statement__ = 52;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 52;
        current_statement__ = 52;
        check_greater_or_equal(function__, "ii[sym1__]", ii[(sym1__ - 1)], 1);
      }
      current_statement__ = 53;
      validate_non_negative_index("jj", "N_obs", N_obs);
      current_statement__ = 54;
      context__.validate_dims("data initialization","jj","int",
          context__.to_vec(N_obs));
      jj = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 54;
      assign(jj, nil_index_list(), context__.vals_i("jj"),
        "assigning variable jj");
      current_statement__ = 54;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 54;
        current_statement__ = 54;
        check_greater_or_equal(function__, "jj[sym1__]", jj[(sym1__ - 1)], 1);
      }
      current_statement__ = 55;
      validate_non_negative_index("gg", "N", N);
      current_statement__ = 56;
      context__.validate_dims("data initialization","gg","int",
          context__.to_vec(N));
      gg = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 56;
      assign(gg, nil_index_list(), context__.vals_i("gg"),
        "assigning variable gg");
      current_statement__ = 56;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 56;
        current_statement__ = 56;
        check_greater_or_equal(function__, "gg[sym1__]", gg[(sym1__ - 1)], 1);
      }
      current_statement__ = 57;
      context__.validate_dims("data initialization","B","int",
          context__.to_vec());
      B = std::numeric_limits<int>::min();
      
      current_statement__ = 57;
      B = context__.vals_i("B")[(1 - 1)];
      current_statement__ = 57;
      current_statement__ = 57;
      check_greater_or_equal(function__, "B", B, 1);
      current_statement__ = 58;
      context__.validate_dims("data initialization","L","int",
          context__.to_vec());
      L = std::numeric_limits<int>::min();
      
      current_statement__ = 58;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 58;
      current_statement__ = 58;
      check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 58;
      current_statement__ = 58;
      check_less_or_equal(function__, "L", L, J);
      current_statement__ = 59;
      context__.validate_dims("data initialization","R","int",
          context__.to_vec());
      R = std::numeric_limits<int>::min();
      
      current_statement__ = 59;
      R = context__.vals_i("R")[(1 - 1)];
      current_statement__ = 59;
      current_statement__ = 59;
      check_greater_or_equal(function__, "R", R, 1);
      current_statement__ = 59;
      current_statement__ = 59;
      check_less_or_equal(function__, "R", R, J);
      current_statement__ = 60;
      validate_non_negative_index("Y", "N_obs", N_obs);
      current_statement__ = 61;
      context__.validate_dims("data initialization","Y","double",
          context__.to_vec(N_obs));
      Y = Eigen::Matrix<double, -1, 1>(N_obs);
      stan::math::fill(Y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 61;
        assign(Y_flat__, nil_index_list(), context__.vals_r("Y"),
          "assigning variable Y_flat__");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          current_statement__ = 61;
          assign(Y, cons_list(index_uni(sym1__), nil_index_list()),
            Y_flat__[(pos__ - 1)], "assigning variable Y");
          current_statement__ = 61;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 61;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 61;
        current_statement__ = 61;
        check_greater_or_equal(function__, "Y[sym1__]", Y[(sym1__ - 1)], -B);
      }
      current_statement__ = 61;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 61;
        current_statement__ = 61;
        check_less_or_equal(function__, "Y[sym1__]", Y[(sym1__ - 1)], B);}
      current_statement__ = 62;
      validate_non_negative_index("V", "N", N);
      current_statement__ = 63;
      context__.validate_dims("data initialization","V","double",
          context__.to_vec(N));
      V = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(V, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> V_flat__;
        current_statement__ = 63;
        assign(V_flat__, nil_index_list(), context__.vals_r("V"),
          "assigning variable V_flat__");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 63;
          assign(V, cons_list(index_uni(sym1__), nil_index_list()),
            V_flat__[(pos__ - 1)], "assigning variable V");
          current_statement__ = 63;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 63;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 63;
        current_statement__ = 63;
        check_greater_or_equal(function__, "V[sym1__]", V[(sym1__ - 1)], -B);
      }
      current_statement__ = 63;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 63;
        current_statement__ = 63;
        check_less_or_equal(function__, "V[sym1__]", V[(sym1__ - 1)], B);}
      current_statement__ = 64;
      context__.validate_dims("data initialization","CV","int",
          context__.to_vec());
      CV = std::numeric_limits<int>::min();
      
      current_statement__ = 64;
      CV = context__.vals_i("CV")[(1 - 1)];
      current_statement__ = 64;
      current_statement__ = 64;
      check_greater_or_equal(function__, "CV", CV, 0);
      current_statement__ = 64;
      current_statement__ = 64;
      check_less_or_equal(function__, "CV", CV, 1);
      current_statement__ = 65;
      validate_non_negative_index("holdout", "N_obs", N_obs);
      current_statement__ = 66;
      context__.validate_dims("data initialization","holdout","double",
          context__.to_vec(N_obs));
      holdout = Eigen::Matrix<double, -1, 1>(N_obs);
      stan::math::fill(holdout, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> holdout_flat__;
        current_statement__ = 66;
        assign(holdout_flat__, nil_index_list(), context__.vals_r("holdout"),
          "assigning variable holdout_flat__");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          current_statement__ = 66;
          assign(holdout, cons_list(index_uni(sym1__), nil_index_list()),
            holdout_flat__[(pos__ - 1)], "assigning variable holdout");
          current_statement__ = 66;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 66;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 66;
        current_statement__ = 66;
        check_greater_or_equal(function__, "holdout[sym1__]",
                               holdout[(sym1__ - 1)], 0);}
      current_statement__ = 66;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 66;
        current_statement__ = 66;
        check_less_or_equal(function__, "holdout[sym1__]",
                            holdout[(sym1__ - 1)], 1);}
      current_statement__ = 67;
      context__.validate_dims("data initialization","sigma_mu_alpha",
          "double",context__.to_vec());
      sigma_mu_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 67;
      sigma_mu_alpha = context__.vals_r("sigma_mu_alpha")[(1 - 1)];
      current_statement__ = 67;
      current_statement__ = 67;
      check_greater_or_equal(function__, "sigma_mu_alpha", sigma_mu_alpha, 0);
      current_statement__ = 68;
      context__.validate_dims("data initialization","sigma_mu_beta","double",
          context__.to_vec());
      sigma_mu_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 68;
      sigma_mu_beta = context__.vals_r("sigma_mu_beta")[(1 - 1)];
      current_statement__ = 68;
      current_statement__ = 68;
      check_greater_or_equal(function__, "sigma_mu_beta", sigma_mu_beta, 0);
      current_statement__ = 69;
      sigma_alpha_prior_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 69;
      sigma_alpha_prior_rate = ((2 - 1) / (B / 5.0));
      current_statement__ = 70;
      tau_prior_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 70;
      tau_prior_rate = ((2 - 1) / (B / 5.0));
      current_statement__ = 71;
      validate_non_negative_index("not_holdout", "N_obs", N_obs);
      current_statement__ = 72;
      not_holdout = Eigen::Matrix<double, -1, 1>(N_obs);
      stan::math::fill(not_holdout, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 72;
      assign(not_holdout, nil_index_list(), subtract(1, holdout),
        "assigning variable not_holdout");
      current_statement__ = 73;
      mean_mu_simplexes = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 73;
      mean_mu_simplexes = (1.0 / G);
      current_statement__ = 74;
      sd_mu_simplexes = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 74;
      sd_mu_simplexes = stan::math::sqrt(
                          ((mean_mu_simplexes * (1 - mean_mu_simplexes)) /
                            ((50 * G) + 1)));
      current_statement__ = 69;
      current_statement__ = 69;
      check_greater_or_equal(function__, "sigma_alpha_prior_rate",
                             sigma_alpha_prior_rate, 0);
      current_statement__ = 70;
      current_statement__ = 70;
      check_greater_or_equal(function__, "tau_prior_rate", tau_prior_rate, 0);
      current_statement__ = 72;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 72;
        current_statement__ = 72;
        check_greater_or_equal(function__, "not_holdout[sym1__]",
                               not_holdout[(sym1__ - 1)], 0);}
      current_statement__ = 72;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 72;
        current_statement__ = 72;
        check_less_or_equal(function__, "not_holdout[sym1__]",
                            not_holdout[(sym1__ - 1)], 1);}
      current_statement__ = 75;
      validate_non_negative_index("alpha_raw", "N", N);
      current_statement__ = 76;
      validate_non_negative_index("beta_raw", "N", N);
      current_statement__ = 77;
      validate_non_negative_index("theta_raw", "J", J);
      current_statement__ = 78;
      validate_positive_index("mu_alpha_raw", "G", G);
      current_statement__ = 79;
      validate_positive_index("mu_beta_raw", "G", G);
      current_statement__ = 80;
      validate_non_negative_index("eta", "N", N);
      current_statement__ = 81;
      validate_positive_index("rho", "J", J);
      current_statement__ = 82;
      validate_non_negative_index("alpha", "N", N);
      current_statement__ = 83;
      validate_non_negative_index("beta", "N", N);
      current_statement__ = 84;
      validate_non_negative_index("theta", "J", J);
      current_statement__ = 85;
      validate_non_negative_index("log_lik", "N_obs", N_obs);
      current_statement__ = 86;
      validate_non_negative_index("mu_alpha", "G", G);
      current_statement__ = 87;
      validate_non_negative_index("mu_beta", "G", G);
      current_statement__ = 88;
      validate_non_negative_index("chi", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N;
      num_params_r__ += N;
      num_params_r__ += 2;
      num_params_r__ += J;
      num_params_r__ += (G - 1);
      num_params_r__ += (G - 1);
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += N;
      num_params_r__ += (J - 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_HBAM_MULTI_NF_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_raw;
      alpha_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(alpha_raw, DUMMY_VAR__);
      
      current_statement__ = 1;
      alpha_raw = in__.vector(N);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_raw;
      beta_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(beta_raw, DUMMY_VAR__);
      
      current_statement__ = 2;
      beta_raw = in__.vector(N);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_lr;
      theta_lr = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(theta_lr, DUMMY_VAR__);
      
      current_statement__ = 3;
      theta_lr = in__.vector(2);
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        assign(theta_lr, nil_index_list(),
          stan::math::ordered_constrain(theta_lr, lp__),
          "assigning variable theta_lr");
      } else {
        current_statement__ = 3;
        assign(theta_lr, nil_index_list(),
          stan::math::ordered_constrain(theta_lr),
          "assigning variable theta_lr");
      }
      std::vector<local_scalar_t__> theta_raw;
      theta_raw = std::vector<local_scalar_t__>(J, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 4;
        assign(theta_raw, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable theta_raw");}
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_alpha_raw;
      mu_alpha_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(G);
      stan::math::fill(mu_alpha_raw, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_alpha_raw_in__;
      mu_alpha_raw_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((G - 1));
      stan::math::fill(mu_alpha_raw_in__, DUMMY_VAR__);
      
      current_statement__ = 5;
      mu_alpha_raw_in__ = in__.vector((G - 1));
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        assign(mu_alpha_raw, nil_index_list(),
          stan::math::simplex_constrain(mu_alpha_raw_in__, lp__),
          "assigning variable mu_alpha_raw");
      } else {
        current_statement__ = 5;
        assign(mu_alpha_raw, nil_index_list(),
          stan::math::simplex_constrain(mu_alpha_raw_in__),
          "assigning variable mu_alpha_raw");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_beta_raw;
      mu_beta_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(G);
      stan::math::fill(mu_beta_raw, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_beta_raw_in__;
      mu_beta_raw_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((G - 1));
      stan::math::fill(mu_beta_raw_in__, DUMMY_VAR__);
      
      current_statement__ = 6;
      mu_beta_raw_in__ = in__.vector((G - 1));
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        assign(mu_beta_raw, nil_index_list(),
          stan::math::simplex_constrain(mu_beta_raw_in__, lp__),
          "assigning variable mu_beta_raw");
      } else {
        current_statement__ = 6;
        assign(mu_beta_raw, nil_index_list(),
          stan::math::simplex_constrain(mu_beta_raw_in__),
          "assigning variable mu_beta_raw");
      }
      local_scalar_t__ sigma_alpha;
      sigma_alpha = DUMMY_VAR__;
      
      current_statement__ = 7;
      sigma_alpha = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        sigma_alpha = stan::math::lb_constrain(sigma_alpha, 0, lp__);
      } else {
        current_statement__ = 7;
        sigma_alpha = stan::math::lb_constrain(sigma_alpha, 0);
      }
      local_scalar_t__ sigma_beta;
      sigma_beta = DUMMY_VAR__;
      
      current_statement__ = 8;
      sigma_beta = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        sigma_beta = stan::math::lub_constrain(sigma_beta, 0, 2, lp__);
      } else {
        current_statement__ = 8;
        sigma_beta = stan::math::lub_constrain(sigma_beta, 0, 2);
      }
      local_scalar_t__ nu;
      nu = DUMMY_VAR__;
      
      current_statement__ = 9;
      nu = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        nu = stan::math::lub_constrain(nu, 3, 30, lp__);
      } else {
        current_statement__ = 9;
        nu = stan::math::lub_constrain(nu, 3, 30);
      }
      local_scalar_t__ tau;
      tau = DUMMY_VAR__;
      
      current_statement__ = 10;
      tau = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        tau = stan::math::lb_constrain(tau, 0, lp__);
      } else {
        current_statement__ = 10;
        tau = stan::math::lb_constrain(tau, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> eta;
      eta = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(eta, DUMMY_VAR__);
      
      current_statement__ = 11;
      eta = in__.vector(N);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 11;
        if (jacobian__) {
          current_statement__ = 11;
          assign(eta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(eta[(sym1__ - 1)], 0, lp__),
            "assigning variable eta");
        } else {
          current_statement__ = 11;
          assign(eta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(eta[(sym1__ - 1)], 0),
            "assigning variable eta");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> rho;
      rho = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
      stan::math::fill(rho, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> rho_in__;
      rho_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((J - 1));
      stan::math::fill(rho_in__, DUMMY_VAR__);
      
      current_statement__ = 12;
      rho_in__ = in__.vector((J - 1));
      current_statement__ = 12;
      if (jacobian__) {
        current_statement__ = 12;
        assign(rho, nil_index_list(),
          stan::math::simplex_constrain(rho_in__, lp__),
          "assigning variable rho");
      } else {
        current_statement__ = 12;
        assign(rho, nil_index_list(),
          stan::math::simplex_constrain(rho_in__), "assigning variable rho");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(beta, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(J, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> log_lik;
      log_lik = Eigen::Matrix<local_scalar_t__, -1, 1>(N_obs);
      stan::math::fill(log_lik, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_alpha;
      mu_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(G);
      stan::math::fill(mu_alpha, DUMMY_VAR__);
      
      current_statement__ = 17;
      assign(mu_alpha, nil_index_list(),
        multiply(
          divide(subtract(mu_alpha_raw, mean_mu_simplexes), sd_mu_simplexes),
          sigma_mu_alpha), "assigning variable mu_alpha");
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_beta;
      mu_beta = Eigen::Matrix<local_scalar_t__, -1, 1>(G);
      stan::math::fill(mu_beta, DUMMY_VAR__);
      
      current_statement__ = 18;
      assign(mu_beta, nil_index_list(),
        multiply(
          divide(subtract(mu_beta_raw, mean_mu_simplexes), sd_mu_simplexes),
          sigma_mu_beta), "assigning variable mu_beta");
      local_scalar_t__ eta_scale;
      eta_scale = DUMMY_VAR__;
      
      current_statement__ = 19;
      eta_scale = (tau * J);
      current_statement__ = 20;
      assign(theta, nil_index_list(), theta_raw, "assigning variable theta");
      current_statement__ = 21;
      assign(theta, cons_list(index_uni(L), nil_index_list()),
        theta_lr[(1 - 1)], "assigning variable theta");
      current_statement__ = 22;
      assign(theta, cons_list(index_uni(R), nil_index_list()),
        theta_lr[(2 - 1)], "assigning variable theta");
      current_statement__ = 26;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 23;
        assign(alpha, cons_list(index_uni(i), nil_index_list()),
          ((alpha_raw[(i - 1)] * sigma_alpha) + mu_alpha[(gg[(i - 1)] - 1)]),
          "assigning variable alpha");
        current_statement__ = 24;
        assign(beta, cons_list(index_uni(i), nil_index_list()),
          stan::math::exp(
            ((beta_raw[(i - 1)] * sigma_beta) + mu_beta[(gg[(i - 1)] - 1)])),
          "assigning variable beta");}
      current_statement__ = 29;
      for (int n = 1; n <= N_obs; ++n) {
        current_statement__ = 27;
        assign(log_lik, cons_list(index_uni(n), nil_index_list()),
          normal_lpdf<false>(Y[(n - 1)],
            (alpha[(ii[(n - 1)] - 1)] +
              (beta[(ii[(n - 1)] - 1)] * theta[(jj[(n - 1)] - 1)])),
            (stan::math::sqrt(eta[(ii[(n - 1)] - 1)]) *
              rho[(jj[(n - 1)] - 1)])), "assigning variable log_lik");}
      current_statement__ = 19;
      current_statement__ = 19;
      check_greater_or_equal(function__, "eta_scale", eta_scale, 0);
      {
        current_statement__ = 32;
        lp_accum__.add(normal_lpdf<propto__>(theta_raw, 0, B));
        current_statement__ = 33;
        lp_accum__.add(normal_lpdf<propto__>(theta_lr, 0, B));
        current_statement__ = 34;
        lp_accum__.add(normal_lpdf<propto__>(alpha_raw, 0, 1));
        current_statement__ = 35;
        lp_accum__.add(
          gamma_lpdf<propto__>(sigma_alpha, 2, sigma_alpha_prior_rate));
        current_statement__ = 36;
        lp_accum__.add(normal_lpdf<propto__>(beta_raw, 0, 1));
        current_statement__ = 37;
        lp_accum__.add(gamma_lpdf<propto__>(sigma_beta, 3, 10));
        current_statement__ = 38;
        lp_accum__.add(
          dirichlet_lpdf<propto__>(mu_alpha_raw, rep_vector(50, G)));
        current_statement__ = 39;
        lp_accum__.add(
          dirichlet_lpdf<propto__>(mu_beta_raw, rep_vector(50, G)));
        current_statement__ = 40;
        lp_accum__.add(
          scaled_inv_chi_square_lpdf<propto__>(eta, nu, eta_scale));
        current_statement__ = 41;
        lp_accum__.add(gamma_lpdf<propto__>(nu, 25, 2.5));
        current_statement__ = 42;
        lp_accum__.add(gamma_lpdf<propto__>(tau, 2, tau_prior_rate));
        current_statement__ = 43;
        lp_accum__.add(dirichlet_lpdf<propto__>(rho, rep_vector(5, J)));
        current_statement__ = 46;
        if (logical_eq(CV, 0)) {
          current_statement__ = 45;
          lp_accum__.add(sum(log_lik));
        } else {
          current_statement__ = 44;
          lp_accum__.add(sum(elt_multiply(log_lik, not_holdout)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_HBAM_MULTI_NF_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> alpha_raw;
      alpha_raw = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(alpha_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      alpha_raw = in__.vector(N);
      Eigen::Matrix<double, -1, 1> beta_raw;
      beta_raw = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(beta_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      beta_raw = in__.vector(N);
      Eigen::Matrix<double, -1, 1> theta_lr;
      theta_lr = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(theta_lr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      theta_lr = in__.vector(2);
      current_statement__ = 3;
      assign(theta_lr, nil_index_list(),
        stan::math::ordered_constrain(theta_lr),
        "assigning variable theta_lr");
      std::vector<double> theta_raw;
      theta_raw = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 4;
        assign(theta_raw, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable theta_raw");}
      Eigen::Matrix<double, -1, 1> mu_alpha_raw;
      mu_alpha_raw = Eigen::Matrix<double, -1, 1>(G);
      stan::math::fill(mu_alpha_raw, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_alpha_raw_in__;
      mu_alpha_raw_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((G - 1));
      stan::math::fill(mu_alpha_raw_in__, DUMMY_VAR__);
      
      current_statement__ = 5;
      mu_alpha_raw_in__ = in__.vector((G - 1));
      current_statement__ = 5;
      assign(mu_alpha_raw, nil_index_list(),
        stan::math::simplex_constrain(mu_alpha_raw_in__),
        "assigning variable mu_alpha_raw");
      Eigen::Matrix<double, -1, 1> mu_beta_raw;
      mu_beta_raw = Eigen::Matrix<double, -1, 1>(G);
      stan::math::fill(mu_beta_raw, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_beta_raw_in__;
      mu_beta_raw_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((G - 1));
      stan::math::fill(mu_beta_raw_in__, DUMMY_VAR__);
      
      current_statement__ = 6;
      mu_beta_raw_in__ = in__.vector((G - 1));
      current_statement__ = 6;
      assign(mu_beta_raw, nil_index_list(),
        stan::math::simplex_constrain(mu_beta_raw_in__),
        "assigning variable mu_beta_raw");
      double sigma_alpha;
      sigma_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_alpha = in__.scalar();
      current_statement__ = 7;
      sigma_alpha = stan::math::lb_constrain(sigma_alpha, 0);
      double sigma_beta;
      sigma_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_beta = in__.scalar();
      current_statement__ = 8;
      sigma_beta = stan::math::lub_constrain(sigma_beta, 0, 2);
      double nu;
      nu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      nu = in__.scalar();
      current_statement__ = 9;
      nu = stan::math::lub_constrain(nu, 3, 30);
      double tau;
      tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      tau = in__.scalar();
      current_statement__ = 10;
      tau = stan::math::lb_constrain(tau, 0);
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      eta = in__.vector(N);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 11;
        assign(eta, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(eta[(sym1__ - 1)], 0),
          "assigning variable eta");}
      Eigen::Matrix<double, -1, 1> rho;
      rho = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(rho, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> rho_in__;
      rho_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((J - 1));
      stan::math::fill(rho_in__, DUMMY_VAR__);
      
      current_statement__ = 12;
      rho_in__ = in__.vector((J - 1));
      current_statement__ = 12;
      assign(rho, nil_index_list(), stan::math::simplex_constrain(rho_in__),
        "assigning variable rho");
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> theta;
      theta = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(N_obs);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu_alpha;
      mu_alpha = Eigen::Matrix<double, -1, 1>(G);
      stan::math::fill(mu_alpha, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu_beta;
      mu_beta = Eigen::Matrix<double, -1, 1>(G);
      stan::math::fill(mu_beta, std::numeric_limits<double>::quiet_NaN());
      
      double eta_scale;
      eta_scale = std::numeric_limits<double>::quiet_NaN();
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(alpha_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(beta_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(theta_lr[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(theta_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        vars__.emplace_back(mu_alpha_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        vars__.emplace_back(mu_beta_raw[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_alpha);
      vars__.emplace_back(sigma_beta);
      vars__.emplace_back(nu);
      vars__.emplace_back(tau);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(eta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(rho[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 17;
      assign(mu_alpha, nil_index_list(),
        multiply(
          divide(subtract(mu_alpha_raw, mean_mu_simplexes), sd_mu_simplexes),
          sigma_mu_alpha), "assigning variable mu_alpha");
      current_statement__ = 18;
      assign(mu_beta, nil_index_list(),
        multiply(
          divide(subtract(mu_beta_raw, mean_mu_simplexes), sd_mu_simplexes),
          sigma_mu_beta), "assigning variable mu_beta");
      current_statement__ = 19;
      eta_scale = (tau * J);
      current_statement__ = 20;
      assign(theta, nil_index_list(), theta_raw, "assigning variable theta");
      current_statement__ = 21;
      assign(theta, cons_list(index_uni(L), nil_index_list()),
        theta_lr[(1 - 1)], "assigning variable theta");
      current_statement__ = 22;
      assign(theta, cons_list(index_uni(R), nil_index_list()),
        theta_lr[(2 - 1)], "assigning variable theta");
      current_statement__ = 26;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 23;
        assign(alpha, cons_list(index_uni(i), nil_index_list()),
          ((alpha_raw[(i - 1)] * sigma_alpha) + mu_alpha[(gg[(i - 1)] - 1)]),
          "assigning variable alpha");
        current_statement__ = 24;
        assign(beta, cons_list(index_uni(i), nil_index_list()),
          stan::math::exp(
            ((beta_raw[(i - 1)] * sigma_beta) + mu_beta[(gg[(i - 1)] - 1)])),
          "assigning variable beta");}
      current_statement__ = 29;
      for (int n = 1; n <= N_obs; ++n) {
        current_statement__ = 27;
        assign(log_lik, cons_list(index_uni(n), nil_index_list()),
          normal_lpdf<false>(Y[(n - 1)],
            (alpha[(ii[(n - 1)] - 1)] +
              (beta[(ii[(n - 1)] - 1)] * theta[(jj[(n - 1)] - 1)])),
            (stan::math::sqrt(eta[(ii[(n - 1)] - 1)]) *
              rho[(jj[(n - 1)] - 1)])), "assigning variable log_lik");}
      current_statement__ = 19;
      current_statement__ = 19;
      check_greater_or_equal(function__, "eta_scale", eta_scale, 0);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(alpha[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(beta[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          vars__.emplace_back(theta[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          vars__.emplace_back(log_lik[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
          vars__.emplace_back(mu_alpha[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
          vars__.emplace_back(mu_beta[(sym1__ - 1)]);}
        vars__.emplace_back(eta_scale);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double min_rho;
      min_rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 30;
      min_rho = min(rho);
      Eigen::Matrix<double, -1, 1> chi;
      chi = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(chi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 31;
      assign(chi, nil_index_list(),
        elt_divide(
          subtract(
            subtract(V,
              to_vector(
                normal_rng(0, multiply(stan::math::sqrt(eta), min_rho),
                  base_rng__))), alpha), beta), "assigning variable chi");
      current_statement__ = 30;
      current_statement__ = 30;
      check_greater_or_equal(function__, "min_rho", min_rho, 0);
      vars__.emplace_back(min_rho);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(chi[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> alpha_raw;
      alpha_raw = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(alpha_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_raw_flat__;
        current_statement__ = 1;
        assign(alpha_raw_flat__, nil_index_list(),
          context__.vals_r("alpha_raw"),
          "assigning variable alpha_raw_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 1;
          assign(alpha_raw, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_raw_flat__[(pos__ - 1)], "assigning variable alpha_raw");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta_raw;
      beta_raw = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(beta_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_raw_flat__;
        current_statement__ = 2;
        assign(beta_raw_flat__, nil_index_list(),
          context__.vals_r("beta_raw"), "assigning variable beta_raw_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 2;
          assign(beta_raw, cons_list(index_uni(sym1__), nil_index_list()),
            beta_raw_flat__[(pos__ - 1)], "assigning variable beta_raw");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> theta_lr;
      theta_lr = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(theta_lr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> theta_lr_flat__;
        current_statement__ = 3;
        assign(theta_lr_flat__, nil_index_list(),
          context__.vals_r("theta_lr"), "assigning variable theta_lr_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 3;
          assign(theta_lr, cons_list(index_uni(sym1__), nil_index_list()),
            theta_lr_flat__[(pos__ - 1)], "assigning variable theta_lr");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> theta_lr_free__;
      theta_lr_free__ = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(theta_lr_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(theta_lr_free__, nil_index_list(),
        stan::math::ordered_free(theta_lr),
        "assigning variable theta_lr_free__");
      std::vector<double> theta_raw;
      theta_raw = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(theta_raw, nil_index_list(), context__.vals_r("theta_raw"),
        "assigning variable theta_raw");
      Eigen::Matrix<double, -1, 1> mu_alpha_raw;
      mu_alpha_raw = Eigen::Matrix<double, -1, 1>(G);
      stan::math::fill(mu_alpha_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_alpha_raw_flat__;
        current_statement__ = 5;
        assign(mu_alpha_raw_flat__, nil_index_list(),
          context__.vals_r("mu_alpha_raw"),
          "assigning variable mu_alpha_raw_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
          current_statement__ = 5;
          assign(mu_alpha_raw,
            cons_list(index_uni(sym1__), nil_index_list()),
            mu_alpha_raw_flat__[(pos__ - 1)],
            "assigning variable mu_alpha_raw");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> mu_alpha_raw_free__;
      mu_alpha_raw_free__ = Eigen::Matrix<double, -1, 1>((G - 1));
      stan::math::fill(mu_alpha_raw_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(mu_alpha_raw_free__, nil_index_list(),
        stan::math::simplex_free(mu_alpha_raw),
        "assigning variable mu_alpha_raw_free__");
      Eigen::Matrix<double, -1, 1> mu_beta_raw;
      mu_beta_raw = Eigen::Matrix<double, -1, 1>(G);
      stan::math::fill(mu_beta_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_beta_raw_flat__;
        current_statement__ = 6;
        assign(mu_beta_raw_flat__, nil_index_list(),
          context__.vals_r("mu_beta_raw"),
          "assigning variable mu_beta_raw_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
          current_statement__ = 6;
          assign(mu_beta_raw, cons_list(index_uni(sym1__), nil_index_list()),
            mu_beta_raw_flat__[(pos__ - 1)], "assigning variable mu_beta_raw");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> mu_beta_raw_free__;
      mu_beta_raw_free__ = Eigen::Matrix<double, -1, 1>((G - 1));
      stan::math::fill(mu_beta_raw_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(mu_beta_raw_free__, nil_index_list(),
        stan::math::simplex_free(mu_beta_raw),
        "assigning variable mu_beta_raw_free__");
      double sigma_alpha;
      sigma_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_alpha = context__.vals_r("sigma_alpha")[(1 - 1)];
      double sigma_alpha_free__;
      sigma_alpha_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_alpha_free__ = stan::math::lb_free(sigma_alpha, 0);
      double sigma_beta;
      sigma_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_beta = context__.vals_r("sigma_beta")[(1 - 1)];
      double sigma_beta_free__;
      sigma_beta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_beta_free__ = stan::math::lub_free(sigma_beta, 0, 2);
      double nu;
      nu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      nu = context__.vals_r("nu")[(1 - 1)];
      double nu_free__;
      nu_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      nu_free__ = stan::math::lub_free(nu, 3, 30);
      double tau;
      tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      tau = context__.vals_r("tau")[(1 - 1)];
      double tau_free__;
      tau_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      tau_free__ = stan::math::lb_free(tau, 0);
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 11;
        assign(eta_flat__, nil_index_list(), context__.vals_r("eta"),
          "assigning variable eta_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          assign(eta, cons_list(index_uni(sym1__), nil_index_list()),
            eta_flat__[(pos__ - 1)], "assigning variable eta");
          current_statement__ = 11;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> eta_free__;
      eta_free__ = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(eta_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 11;
        assign(eta_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(eta[(sym1__ - 1)], 0),
          "assigning variable eta_free__");}
      Eigen::Matrix<double, -1, 1> rho;
      rho = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(rho, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rho_flat__;
        current_statement__ = 12;
        assign(rho_flat__, nil_index_list(), context__.vals_r("rho"),
          "assigning variable rho_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 12;
          assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
            rho_flat__[(pos__ - 1)], "assigning variable rho");
          current_statement__ = 12;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> rho_free__;
      rho_free__ = Eigen::Matrix<double, -1, 1>((J - 1));
      stan::math::fill(rho_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      assign(rho_free__, nil_index_list(), stan::math::simplex_free(rho),
        "assigning variable rho_free__");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(alpha_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(beta_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(theta_lr_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(theta_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= (G - 1); ++sym1__) {
        vars__.emplace_back(mu_alpha_raw_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= (G - 1); ++sym1__) {
        vars__.emplace_back(mu_beta_raw_free__[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_alpha_free__);
      vars__.emplace_back(sigma_beta_free__);
      vars__.emplace_back(nu_free__);
      vars__.emplace_back(tau_free__);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(eta_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= (J - 1); ++sym1__) {
        vars__.emplace_back(rho_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("alpha_raw");
    names__.emplace_back("beta_raw");
    names__.emplace_back("theta_lr");
    names__.emplace_back("theta_raw");
    names__.emplace_back("mu_alpha_raw");
    names__.emplace_back("mu_beta_raw");
    names__.emplace_back("sigma_alpha");
    names__.emplace_back("sigma_beta");
    names__.emplace_back("nu");
    names__.emplace_back("tau");
    names__.emplace_back("eta");
    names__.emplace_back("rho");
    names__.emplace_back("alpha");
    names__.emplace_back("beta");
    names__.emplace_back("theta");
    names__.emplace_back("log_lik");
    names__.emplace_back("mu_alpha");
    names__.emplace_back("mu_beta");
    names__.emplace_back("eta_scale");
    names__.emplace_back("min_rho");
    names__.emplace_back("chi");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(G)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(G)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(G)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(G)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_lr" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_alpha_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_beta_raw" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_alpha");
    param_names__.emplace_back(std::string() + "sigma_beta");
    param_names__.emplace_back(std::string() + "nu");
    param_names__.emplace_back(std::string() + "tau");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_alpha" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_beta" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "eta_scale");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "min_rho");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_lr" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= (G - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_alpha_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= (G - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_beta_raw" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_alpha");
    param_names__.emplace_back(std::string() + "sigma_beta");
    param_names__.emplace_back(std::string() + "nu");
    param_names__.emplace_back(std::string() + "tau");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= (J - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_alpha" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_beta" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "eta_scale");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "min_rho");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"beta_raw\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"theta_lr\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"theta_raw\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu_alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" << G << "},\"block\":\"parameters\"},{\"name\":\"mu_beta_raw\",\"type\":{\"name\":\"vector\",\"length\":" << G << "},\"block\":\"parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"vector\",\"length\":" << G << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"vector\",\"length\":" << G << "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_scale\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"min_rho\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"chi\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"beta_raw\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"theta_lr\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"theta_raw\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu_alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" << (G - 1) << "},\"block\":\"parameters\"},{\"name\":\"mu_beta_raw\",\"type\":{\"name\":\"vector\",\"length\":" << (G - 1) << "},\"block\":\"parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" << (J - 1) << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << N_obs << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"vector\",\"length\":" << G << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"vector\",\"length\":" << G << "},\"block\":\"transformed_parameters\"},{\"name\":\"eta_scale\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"min_rho\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"chi\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_HBAM_MULTI_NF_namespace::model_HBAM_MULTI_NF;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_HBAM_MULTI_NF_namespace::profiles__;
}
#endif
#endif
